name: MyDeck Release Version

on: push

jobs:
  # check version between last tag and package.json - if version not change then the build will fail (correct way to not continue wasting build time)
  version:
    runs-on: ubuntu-latest
    outputs:
      v: ${{ steps.version_check.outputs.releaseVersion }}
    steps:
      - uses: actions/checkout@v2

      - run: git fetch --all --tags

      - name: Check Release Version
        id: version_check
        uses: thebongy/version-check@v1
        with:
          file: ./packages/desktop/package.json
          tagFormat: v${version}
      # - name:
      #   run: |
      #   echo "Version ${{steps.version_check.outputs.releaseVersion}}"


  # generate build artifacts
  artifacts:
    runs-on: ${{ matrix.target.os }}
    needs: version
    defaults:
      run:
        working-directory: ./packages/desktop

    strategy:
      matrix:
        target: [ 
          { 'os': 'windows-latest', 'system': 'win', 'arch': 'amd64', 'ext': 'exe' },
          { 'os': 'macos-latest', 'system': 'mac', 'arch': 'amd64', 'ext': 'dmg' },
          # { 'os': 'macos-latest', 'system': 'mac', 'arch': 'arm64', 'ext': 'dmg' },
          { 'os': 'ubuntu-latest', 'system': 'linux', 'arch': 'amd64', 'ext': 'deb' },
          # { 'os': 'ubuntu-latest', 'system': 'linux', 'arch': '386', 'ext': 'dmg' },
        ]
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 14
      
      - name: Yarn install
        run: yarn install
      - name: Yarn release - Build nextron desktop app
        run: yarn release
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: MyDeck_${{ needs.version.outputs.v }}_${{ matrix.target.system }}.${{ matrix.target.ext }}
          path: MyDeck_${{ needs.version.outputs.v }}_${{ matrix.target.system }}.${{ matrix.target.ext }}


  # create release tag from version
  release:
    runs-on: ubuntu-latest
    needs: [ version, artifacts ]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - uses: actions/checkout@v2

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      # env:
      #   GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        tag_name: ${{ needs.version.output.v }}
        release_name: Release ${{ needs.version.output.v }}
        draft: false
        prerelease: false
        
  # Add all the builds as assets to the release
  add:
    runs-on: ${{ matrix.target.os }}
    needs: [ artifacts, release ]
    strategy:
      matrix:
        target: [ 
          { 'os': 'windows-latest', 'system': 'win', 'arch': 'amd64', 'ext': 'exe' },
          { 'os': 'macos-latest', 'system': 'mac', 'arch': 'amd64', 'ext': 'dmg' },
          # { 'os': 'macos-latest', 'system': 'mac', 'arch': 'arm64', 'ext': 'dmg' },
          { 'os': 'ubuntu-latest', 'system': 'linux', 'arch': 'amd64', 'ext': 'deb' },
          # { 'os': 'ubuntu-latest', 'system': 'linux', 'arch': '386', 'ext': 'dmg' },
        ]
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: MyDeck_${{ needs.version.outputs.v }}_${{ matrix.target.system }}.${{ matrix.target.ext }}

    - name: Upload Artifact to Release
      uses: actions/upload-release-asset@v1
      # env:
      #   GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      with:
        upload_url: ${{ needs.release.outputs.upload_url }}
        asset_path: ./packages/desktop/dist/MyDeck_${{ needs.version.outputs.v }}_${{ matrix.target.system }}.${{ matrix.target.ext }}
        asset_name: MyDeck_${{ needs.version.outputs.v }}_${{ matrix.target.system }}.${{ matrix.target.ext }}
        # asset_content_type: application/zip
